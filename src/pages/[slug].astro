---
import Layout from "../layouts/Layout.astro";
import { wpquery } from "../data/wordpress";
import BodyCopy from "../components/BodyCopy.astro";
import LowerContent from "../components/LowerContent.astro";
import LearnMoreList from "../components/LearnMoreList.astro";
import RelatedProgSlider from "../components/RelatedProgSlider";
import NextStepFooter from "../components/NextStepFooter";
import TopOption from "../components/TopOption.astro";
import ProgramCareersHeading from "../components/ProgramCareersHeading";
import ProgramGlanceCopy from "../components/ProgramGlanceCopy";
import "../styles/inner-body-copy.scss";
import "@fontsource/domine/400.css";
import "@fontsource/domine/500.css";
import "@fontsource/domine/600.css";
import "@fontsource/domine/700.css";
import AnimatedTitle from "../components/program-page/AnimatedTitle";
import AnimatedHero from "../components/program-page/AnimatedHero";
import AnimatedBodyCopy from "../components/program-page/AnimatedBodyCopy";
import AnimatedProgramAtAGlance from "../components/program-page/AnimatedProgramAtAGlance";
import AnimatedRightImage from "../components/program-page/AnimatedRightImage";
import TitleAndNav from "../components/TitleAndNav";
import NavigationBar from "../components/NavigationBar";
import "../styles/slug-page-styles.scss";
import QuoteContent from "../components/QuoteContent";



export async function getStaticPaths() {
  const data = await wpquery({
    query: `query ProgramsListing {
  programs(first:120) {
    nodes {
      program {
        fullProgramTitle
        degreeType
        repeaterDegrees{
          degreeName
        }
        slug
        school
        programAtAGlance
        heroImgDesktop {
          sourceUrl
        }
        horizontalPositionDesktopHero
        heroImgTablet{
          sourceUrl
        }
        heroImgMobile{
          sourceUrl
        }
        departmentRepeater {
          deptTitle
          deptUrl
        }
        careers {
          left
          right
          body
        }
        programOfStudy {
          left
          rightImage {
            sourceUrl
          }
          rightImageHorizontalPosition
          rightImageVerticalPosition
          body
        }
        lowerContent {
          title
          body
        }
        quoteContentArea
        learnMoreList {
          title
          slug
          schoolOrAdditionalLabel
        }
        metaTitle
        metaDescription
        socialImage{
          sourceUrl
        }
      }
      title
    }
  }
}`,
  });
  // console.log(data.programs.nodes[0].program.heroImgDesktop.sourceUrl);
  const paths = data.programs.nodes.map(
    (program: {
      program: {
        title: string;
        programAtAGlance: string;
        degreeType: string[];
        repeaterDegrees: string[];
        school: string;
        departmentRepeater: string[];
        heroImgDesktop: string;
        horizontalPositionDesktopHero: number;
        heroImgTablet: string;
        heroImgMobile: string;

        careers: string;
        programOfStudy: string;
        quoteContentArea: string;
        lowerContent: [];
        learnMoreList: [];
        slug: string;
            metaTitle:string;
        metaDescription:string;
        socialImage:[];
      };
      title: string;
    }) => ({
      params: { slug: program.program.slug },
      props: {
        slug: program.program.slug,
        title: program.title,
        programAtAGlance: program.program.programAtAGlance,
        horizontalPositionDesktopHero:
          program.program.horizontalPositionDesktopHero,
        degreeType: program.program.degreeType,
        repeaterDegrees: program.program.repeaterDegrees,
        school: program.program.school,
        department: program.program.departmentRepeater,
        heroImgDesktop: program.program.heroImgDesktop,
        heroImgTablet: program.program.heroImgTablet,
        heroImgMobile: program.program.heroImgMobile,
        careers: program.program.careers,
        programOfStudy: program.program.programOfStudy,
        lowerContent: program.program.lowerContent,
        quoteContentArea: program.program.quoteContentArea,
        learnMoreList: program.program.learnMoreList,
              metaTitle:program.program.metaTitle,
        metaDescription:program.program.metaDescription,
        socialImage:program.program.socialImage,
      },
    })
  );
  return paths;
}
// const {
//   title,
//   body,
//   slug,
//   programAtAGlance,
//   degreeType,
//   school,
//   department: { deptUrl, deptTitle },
//   // heroImgDesktop: { sourceUrl },
//   // heroImgDesktop: { sourceUrl } = {
//   //   sourceUrl:
//   //     "https://ceva6.tcnj.edu/wp-content/uploads/sites/9/2024/02/anthro-hero-scaled.jpg",
//   // },
//   heroImgDesktop,

//   content,
//   careers: { left: careersLeft, right: careersRight, body: careersBody },
//   programOfStudy: {
//     left: programOfStudyLeft,
//     // rightImage: { sourceUrl: programOfStudyRight },
//     rightImage: { sourceUrl: programOfStudyRight } = {
//       sourceUrl:
//         "https://ceva6.tcnj.edu/wp-content/uploads/sites/9/2024/02/anthro-body-image.jpg",
//     },
//     body: programOfStudyBody,
//   },

//   lowerContent,
//   learnMoreList,
// } = Astro.props;

// Define an interface for your props
interface AstroProps {
  title: string;
  body: string;
  slug: string;
  programAtAGlance: string;
  degreeType: string[]; // Assuming degreeType is an array of strings
  repeaterDegrees: {degreeName:string}[];
  school: string[];
  department: { deptUrl: string; deptTitle: string }[];
  horizontalPositionDesktopHero: number;
  heroImgDesktop: {
    sourceUrl: string;
  };
  heroImgTablet: {
    sourceUrl: string;
  };
  heroImgMobile: {
    sourceUrl: string;
  };
  content: string;
  careers: {
    left: string;
    right: string;
    body: string;
  };
  programOfStudy: {
    left: string;
    rightImage?: {
      sourceUrl: string;
    };
    rightImageHorizontalPosition: number;
    rightImageVerticalPosition: number;
    body: string;
  };
  lowerContent: any;
  quoteContentArea: string;
  learnMoreList: string;
      metaTitle:string;
        metaDescription:string;
        socialImage:{
          sourceUrl:string;
        }
}

// Destructure with the defined interface
const {
  title,
  body,
  slug,
  programAtAGlance,
  degreeType,
  repeaterDegrees,
  school,
  department,
  heroImgDesktop,
  horizontalPositionDesktopHero,
  heroImgTablet,
  heroImgMobile,
  content,
  careers: { left: careersLeft, right: careersRight, body: careersBody },
 programOfStudy: {
  left: programOfStudyLeft,
  rightImage,  // Get the rightImage object without destructuring
  rightImageHorizontalPosition,
  rightImageVerticalPosition,
  body: programOfStudyBody,
},
  lowerContent,
  quoteContentArea,
  learnMoreList,
  metaTitle,
metaDescription,
    socialImage,
} = Astro.props as AstroProps; // Add the type assertion here
const programOfStudyRight = rightImage?.sourceUrl ?? "";
// console.log(repeaterDegrees);
const socialSourceUrl = socialImage ? socialImage.sourceUrl : "";

// console.log(metaTitle);
// console.log(metaDescription);
// console.log(socialSourceUrl);
// console.log(rightImageHorizontalPosition, rightImageVerticalPosition);
const { sourceUrl } = heroImgDesktop ?? {
  sourceUrl: "",
};
// console.log(heroImgTablet, heroImgMobile);
// const {programOfStudyLeft} = programOfStudy ?? {
//   programOfStudyLeft: "",
// };
// const {programOfStudyRight} = programOfStudy ?? {
//   sourceUrl: "https://ceva6.tcnj.edu/wp-content/uploads/sites/9/2024/02/anthro-body-image.jpg",
// };
// const {programOfStudyBody} = programOfStudy ?? {
//   programOfStudyBody: "",
// };

// console.log(degreeType);
// console.log(school);
// console.log(department);
// console.log(degreeType.length);
---

<Layout title={title} description={metaDescription} image={socialSourceUrl} metaTitle={metaTitle}>
      <!-- <TitleAndNav /> -->
<NavigationBar client:load/>
  <main class="font-bitter text-darkgrey overflow-hidden">
    <div class="bg-tcnjyellow w-auto">
      <div
        class="pl-[35px]
      pr-[35px]
      max-w-[70.5rem]
      pt-[35px]
      sm:pt-[50px]
      md:pt-[58px]
      m-auto
      lg:pl-0
      lg:pr-0"
      >
        <p
          class="text-[17px] leading-[26px] pb-[20px] font-bitter
        sm:text-[18px]"
        >
          <a href="/">Academics Home</a> / <a href="/">Explore Programs</a> / <span
            class="font-bold"
          >
            {title}
          </span>
        </p>
        <!-- <h1
          class="font-chunkfive
          text-tcnjblue
          text-[45px]
          leading-[50px]
          sm:text-[60px]
          sm:leading-[60px]
         
          md:text-custom-16.25
          md:leading-[4.688rem]"
        >
          {title}
        </h1> -->
        <AnimatedTitle title={title} client:load />
      </div>
      <div
        class="w-auto bg-yellowWhiteGradient
      mt-[35px]
      md:mt-[50px]"
      >
        {
          sourceUrl && (
            <>
            <!--
              <div class="relative w-[100%] overflow-hidden">
                <picture>
                  {heroImgMobile && (
                    <source
                      media="(max-width: 550px)"
                      srcset={heroImgMobile.sourceUrl}
                    />
                  )}
                  {heroImgTablet && (
                    <source
                      media="(max-width: 900px)"
                      srcset={heroImgTablet.sourceUrl}
                    />
                  )}
                  <img
                    src={sourceUrl}
                    style={{
                      objectPosition: `${horizontalPositionDesktopHero}%`,
                    }}
                    class="relative z-30
                w-[100%]
          h-[450px]
          sm:h-[600px]
          object-cover
          pl-[35px]
          
          lg:pl-[100px]
          lg:w-[100%]
          xl:pl-[200px]
          
          "
                    id="hero-img"
                    alt={title}
                  />
                </picture>
                <div
                  class="absolute top-0 
                bg-lightgrey
                w-[100%]
          h-[450px]
          sm:h-[600px]
          left-[35px]
          
          lg:left-[100px]
          xl:left-[200px]
          
          "
                />
              </div>
               -->
              <AnimatedHero
                heroImgMobile={heroImgMobile}
                heroImgTablet={heroImgTablet}
                sourceUrl={sourceUrl}
                horizontalPositionDesktopHero={horizontalPositionDesktopHero}
                title={title}
                client:load
              />
            </>
          )
        }
      </div>
    </div>
    <div
      class="bg-white
    w-auto
    pt-[45px]
    pb-[45px]
    sm:pt-[35px]
    sm:pb-[35px]
    pl-[35px]
    pr-[35px]
    md:pt-[50px]
    md:pb-[50px]"
    >
      <div class="max-w-[70.5rem] bg-white m-auto">
        <div
          id="degree-school-department"
          class="flex
          text-lg
          items-start
          flex-col
          gap-[35px]
          sm:max-w-[655px]
          sm:m-auto
          sm:flex-row
          sm:flex-nowrap
        
          sm:justify-between
          md:max-w-none"
        >
          <!-- <TopOption heading={degreeType && degreeType.length > 1 ? 'Degrees' : 'Degree'} imgSrc="ribbon">
            {
              Array.isArray(degreeType)
                ? degreeType.map((degree: string) => (
                    <span class="block">{degree}</span>
                  ))
                : { degreeType }
            }
          </TopOption> -->
          <TopOption heading={repeaterDegrees && repeaterDegrees.length > 1 ? 'Degrees' : 'Degree'} imgSrc="ribbon">
            {
              Array.isArray(repeaterDegrees)
                ? repeaterDegrees.map((degree) => (
                    <span class="block">{degree.degreeName}</span>
                  ))
                : null
            }
          </TopOption>
          <TopOption school={school} heading={school && school.length > 1 ? 'Schools' : 'School'} imgSrc="building">
            {school}
          </TopOption>
          <TopOption heading={department && department.length > 1 ? 'Departments' : "Department"} imgSrc="departments">
            <!-- {deptTitle}
             -->
            {
              Array.isArray(department)
                ? department.map((degree) => (
                    <a class="text-[#33739F] underline" href={degree.deptUrl}>
                      <span class="block">{degree.deptTitle}</span>
                    </a>
                  ))
                : department
            }
          </TopOption>
        </div>
      </div>
    </div>
    <div
      class="bg-tcnjyellow w-auto
    pl-[35px]
    pr-[35px]
    sm:pl-[82px]
    sm:pr-[82px]
    md:pl-[35px]
    md:pr-[35px]"
    >
      <div class="max-w-[70.5rem] m-auto">
       
            <AnimatedProgramAtAGlance programAtAGlance={programAtAGlance} client:load>

      </div>
    </div>
    <div
      id="programs-of-study-container"
      class="px-[35px] w-auto sm:bg-tcnjyellow  
     "
    >
      <div
        class="m-auto
      bg-white
      relative
      pb-[75px]
      sm:pl-[47px]
      sm:pr-[47px]
      "
      >
        {
  programOfStudyRight && programOfStudyRight !== null && (
          <AnimatedRightImage programOfStudyRight={programOfStudyRight}
rightImageHorizontalPosition={rightImageHorizontalPosition} 
rightImageVerticalPosition={rightImageVerticalPosition} client:load/>
          //   <img
          //     src={programOfStudyRight}
          //     alt=""
          //     style={{
          //       objectPosition: `${rightImageHorizontalPosition}% ${rightImageVerticalPosition}%`,
          //     }}
          //     id="prog-study-img"
          //     class="relative
          // top-[-50px]
          // object-cover
          // object-left
          // w-[100%]
          // h-[400px]
          // max-w-none
          // sm:h-[550px]
          // sm:top-[-50px]
          
      
          // md:right-[-35px]
          // md:h-[650px]
          // md:absolute"
          //   />
          )
        }
        <div
          class="max-w-[70.5rem]
        m-auto
        bg-white
        pt-[0px]
        sm:pt-[0]
        sm:pb-[15px]
        md:pt-[150px]
        md:pb-[75px]"
        >
          <BodyCopy
            left={programOfStudyLeft}
            body={programOfStudyBody}
            right={programOfStudyRight}
          />
        </div>
      </div>
    </div>
    <div class="px-[35px] m-auto bg-tcnjyellow" id="careers-intro">
      <div
        class="max-w-[70.5rem] m-auto
      pt-[100px]
      sm:pt-[100px]
      md:pt-[200px]"
      >
        <!-- <BodyCopy
          heading="Careers"
          left={careersLeft}
          right={careersRight}
          body={careersBody}
        /> -->
        <AnimatedBodyCopy
          heading="Careers"
          left={careersLeft}
          right={careersRight}
          body={careersBody}
          client:load/>
      </div>
    </div>
   
    <div
      class=" px-[0] sm:px-[35px] w-auto sm:bg-tcnjyellow"
      id="lower-content-and-related-progras"
    >
      <div class="m-auto bg-white pb-[75px] sm:pb-[100px] md:pb-[150px]">
        <div class="max-w-[70.5rem] m-auto">

          {lowerContent && <LowerContent lowerContent={lowerContent} quote={quoteContentArea} />}
          <!-- {learnMoreList && <LearnMoreList learnMoreList={learnMoreList} />} -->
          {
            learnMoreList && (
              <RelatedProgSlider learnMoreList={learnMoreList} client:load />
            )
          }
        </div>
      </div>
    </div>
    <NextStepFooter />
  </main>
</Layout>
