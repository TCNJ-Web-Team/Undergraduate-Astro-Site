---
import Layout from "../../layouts/Layout.astro";
import { wpquery } from "../../data/wordpress";
import BodyCopy from "../../components/BodyCopy.astro";
import LowerContent from "../../components/LowerContent.astro";
// import LearnMoreList from "../../components/LearnMoreList.astro";
import RelatedProgSlider from "../../components/RelatedProgSlider";
import NextStepFooter from "../../components/NextStepFooter";
import TopOption from "../../components/TopOption";
import TopOptionNew from "../../components/TopOptionNew";

// import ProgramCareersHeading from "../../components/ProgramCareersHeading";
// import ProgramGlanceCopy from "../../components/ProgramGlanceCopy";
import "../../styles/inner-body-copy.scss";
import "../../styles/grad-styles.scss";

import "@fontsource/domine/400.css";
import "@fontsource/domine/500.css";
import "@fontsource/domine/600.css";
import "@fontsource/domine/700.css";
import AnimatedTitle from "../../components/program-page/AnimatedTitle";
import AnimatedHero from "../../components/program-page/AnimatedHero";
import AnimatedBodyCopy from "../../components/program-page/AnimatedBodyCopy";
import AnimatedProgramAtAGlance from "../../components/program-page/AnimatedProgramAtAGlance";
import AnimatedRightImage from "../../components/program-page/AnimatedRightImage";
// import TitleAndNav from "../../components/TitleAndNav";
import NavigationBar from "../../components/NavigationBar";
import "../../styles/slug-page-styles.scss";
import NavigationBarGrad from "../../components/graduate-components/NavigationBarGrad";
import AtAGlanceGrad from "../../components/graduate-components/AtAGlanceGrad";
import ProgramDetailsGrad from "../../components/graduate-components/ProgramDetailsGrad";
import AnnouncementBar from "../../components/graduate-components/AnnouncementBar";
import VideoPlayerBody from "../../components/graduate-components/VideoPlayerBody";
import { video } from "framer-motion/client";
import { custom } from "astro:schema";
import GraduateHero from "../../components/graduate-components/GraduateHero";
// import QuoteContent from "../../components/QuoteContent";

export async function getStaticPaths() {
  const data = await wpquery({
    query: `query GraduateProgramLising {
  graduatePrograms(first:120) {
    nodes {
      graduateProgram {
        school
        slug
        acceleratedSubtitle
        announcementBar {
          accouncementLink
          announcementEndDate
          announcementLinkText
          announcementStartDate
          announcementText
        }
        customCtaButtons {
          buttonLink {
            url
          }
          buttonText
        }
        degreeType
        repeaterDegrees {
          degreeName
        }
        departmentRepeater {
          deptTitle
          deptUrl
        }
   heroImgDesktop {
          sourceUrl
        }
        heroImgDesktopWebp{
          sourceUrl
        }
        horizontalPositionDesktopHero
        horizontalPositionTablet
        horizontalPositionMobile
        heroImgTablet{
          sourceUrl
        }
        heroImgTabletWebp{
          sourceUrl
        }
        heroImgMobile{
          sourceUrl
        }
    heroImgMobileWebp{
          sourceUrl
        }
        programAtAGlance
        programCoordinators
        programDetails {
          detailTitle
          detailContent
          popupContent
        }
        programHighlights
        lowerContent {
          title
          body
          abbreviatedNavTitle
          includeInNav
        }
        learnMoreList {
          title
          slug
          schoolOrAdditionalLabel
        }
        videos {
          captionUrl
          posterImage {
            sourceUrl
          }
          videoUrl
        }
      }
      title
    }
  }
}`,
  });

  const paths = data.graduatePrograms.nodes.map(
    (program: {
      graduateProgram: {
        title: string;
        programAtAGlance: string;
        programCoordinators: string;
        programDetails: {
          detailTitle: string;
          detailContent: string;
          popupContent: string;
        }[];
        programHighlights: string;
        announcementBar: {
          accouncementLink: string;
          announcementEndDate: string;
          announcementLinkText: string;
          announcementStartDate: string;
          announcementText: string;
        };
        customCtaButtons: {
          buttonLink: {
            url: string;
          };
          buttonText: string;
        }[];
        learnMoreList: [];

        degreeType: string[];
        repeaterDegrees: { degreeName: string }[];
        school: string[];
        acceleratedSubtitle: string[];
        departmentRepeater: string[];
        heroImgDesktop: string;
        heroImgDesktopWebp: string;
        horizontalPositionDesktopHero: number;
        horizontalPositionTablet: number;
        horizontalPositionMobile: number;
        heroImgTablet: string;
        heroImgTabletWebp: string;
        heroImgMobile: string;
        heroImgMobileWebp: string;

        badge: string[];
        careersTitle: string;
        careers: string;
        programOfStudy: string;
        quoteContentArea: string;
        lowerContent: [];
        slug: string;
        metaTitle: string;
        metaDescription: string;
        socialImage: [];
        videos: {
          captionUrl: string;
          posterImage: {
            sourceUrl: string;
          };
          videoUrl: string;
        }[];
      };
      title: string;
    }) => ({
      params: { slug: program.graduateProgram.slug },
      props: {
        slug: program.graduateProgram.slug,
        title: program.title,
        programAtAGlance: program.graduateProgram.programAtAGlance,
        programCoordinators: program.graduateProgram.programCoordinators,
        programDetails: program.graduateProgram.programDetails,
        programHighlights: program.graduateProgram.programHighlights,
        announcementBar: program.graduateProgram.announcementBar,
        customCtaButtons: program.graduateProgram.customCtaButtons,
        horizontalPositionDesktopHero:
          program.graduateProgram.horizontalPositionDesktopHero,
        horizontalPositionTablet:
          program.graduateProgram.horizontalPositionTablet,
        horizontalPositionMobile:
          program.graduateProgram.horizontalPositionMobile,
        degreeType: program.graduateProgram.degreeType,
        repeaterDegrees: program.graduateProgram.repeaterDegrees,
        school: program.graduateProgram.school,
        acceleratedSubtitle: program.graduateProgram.acceleratedSubtitle,
        department: program.graduateProgram.departmentRepeater,
        heroImgDesktop: program.graduateProgram.heroImgDesktop,
        heroImgDesktopWebp: program.graduateProgram.heroImgDesktopWebp,
        heroImgTablet: program.graduateProgram.heroImgTablet,
        heroImgTabletWebp: program.graduateProgram.heroImgTabletWebp,
        heroImgMobile: program.graduateProgram.heroImgMobile,
        heroImgMobileWebp: program.graduateProgram.heroImgMobileWebp,
        badge: program.graduateProgram.badge,
        careersTitle: program.graduateProgram.careersTitle,
        careers: program.graduateProgram.careers,
        programOfStudy: program.graduateProgram.programOfStudy,
        lowerContent: program.graduateProgram.lowerContent,
        quoteContentArea: program.graduateProgram.quoteContentArea,
        learnMoreList: program.graduateProgram.learnMoreList,
        metaTitle: program.graduateProgram.metaTitle,
        metaDescription: program.graduateProgram.metaDescription,
        socialImage: program.graduateProgram.socialImage,
        videos: program.graduateProgram.videos,
      },
    })
  );
  return paths;
}

// Define an interface for your props
interface AstroProps {
  slug: string;
  title: string;
  programAtAGlance: string;
  programCoordinators: string;
  programDetails: {
    detailTitle: string;
    detailContent: string;
    popupContent: string;
  }[];
  announcementBar: {
    accouncementLink: string;
    announcementEndDate: string;
    announcementLinkText: string;
    announcementStartDate: string;
    announcementText: string;
  };
  programHighlights: string;
  customCtaButtons: {
    buttonLink: {
      url: string;
    };
    buttonText: string;
  }[];
  horizontalPositionDesktopHero: number;
  horizontalPositionTablet: number;
  horizontalPositionMobile: number;
  degreeType: string[];
  repeaterDegrees: { degreeName: string }[];
  school: string[];
  acceleratedSubtitle: string[];
  department: { deptTitle: string; deptUrl: string }[];
  heroImgDesktop: { altText: string; sourceUrl: string };
  heroImgDesktopWebp: { sourceUrl: string }; // was just a URL in query
  heroImgTablet: { sourceUrl: string };
  heroImgTabletWebp: { sourceUrl: string };
  heroImgMobile: { sourceUrl: string };
  heroImgMobileWebp: { sourceUrl: string };
  badge: any[]; // clarify structure if known
  careersTitle: string;
  careers: string;
  programOfStudy: string;
  lowerContent: any;
  quoteContentArea: string;
  learnMoreList: any[];
  metaTitle: string;
  metaDescription: string;
  socialImage: any[];
  videos: {
    captionUrl: string;
    posterImage: {
      sourceUrl: string;
    };
    videoUrl: string;
  }[];
}

// Destructure with the defined interface
const {
  slug,
  title,
  programAtAGlance,
  programCoordinators,
  programDetails,
  programHighlights,
  announcementBar,
  customCtaButtons,
  horizontalPositionDesktopHero,
  horizontalPositionTablet,
  horizontalPositionMobile,
  degreeType,
  repeaterDegrees,
  school,
  acceleratedSubtitle,
  department,
  heroImgDesktop,
  heroImgDesktopWebp,
  heroImgTablet,
  heroImgTabletWebp,
  heroImgMobile,
  heroImgMobileWebp,
  badge,
  careersTitle,
  careers,
  programOfStudy,
  lowerContent,
  quoteContentArea,
  learnMoreList,
  metaTitle,
  metaDescription,
  socialImage,
  videos,
} = Astro.props as AstroProps;
// console.log(customCtaButtons);
// console.log(videos);
// const socialSourceUrl = socialImage && socialImage.sourceUrl ? socialImage.sourceUrl : (typeof heroImgDesktop === 'string' ? heroImgDesktop : heroImgDesktop.sourceUrl);
const { sourceUrl } = heroImgDesktop ?? {
  sourceUrl: "",
};
console.log(
  heroImgDesktop,
  heroImgMobileWebp,
  heroImgMobile,
  heroImgTabletWebp,
  heroImgTablet,
  heroImgDesktopWebp,
  "Postions",
  horizontalPositionDesktopHero,
  horizontalPositionTablet,
  horizontalPositionMobile
);
// console.log(videos.length);
---

<Layout title={title} description={metaDescription} metaTitle={title}>
  <NavigationBarGrad
    additionalMenuItems={lowerContent}
    customCtaButtons={customCtaButtons}
    client:visible
  />
  <main class="font-domine text-darkgrey overflow-hidden">
    <div class="bg-tcnjyellow w-auto">
      <div
        class="pl-[35px]
      pr-[35px]
      lg:max-w-[70.5rem]
      md:max-w-[990px]
      pt-[31px]
      sm:pt-[47px]
      md:pt-[56px]
      m-auto
      lg:pl-0
      lg:pr-0"
      >
        <p
          class="text-[17px] leading-[26px] pb-[18px] font-domine
          sm:pb-[30px]
        sm:text-[17px]
        sm:leading-[19px]
        sm:px-[45px]
        md:text-[18px]
        md:leading-[21px]
        md:pb-[25px]
        md:px-0
        lg:pb-[26px]
        lg:text-[18px]
                lg:leading-[21px]"
        >
          <a href="https://graduate.tcnj.edu" class="yellow-bg-text"
            >Graduate Home</a
          > / <a href="/graduate" class="yellow-bg-text"
            >Explore Graduate Programs</a
          > / <span class="font-bold">
            {title}
          </span>
        </p>

        <AnimatedTitle
          title={title}
          subtitle={acceleratedSubtitle}
          client:load
        />
      </div>
      <div
        class=`w-auto bg-tcnjyellow md:bg-yellowWhiteGradientMd lg:bg-yellowWhiteGradientLg
      ${acceleratedSubtitle ? "mt-[35px] sm:mt-[39px] md:mt-[55px]" : "mt-[42px] sm:mt-[40px] md:mt-[50px] "}`
      >
        {
          sourceUrl && (
            <>
              <GraduateHero
                heroImgMobileWebp={heroImgMobileWebp}
                heroImgMobile={heroImgMobile}
                heroImgTabletWebp={heroImgTabletWebp}
                heroImgTablet={heroImgTablet}
                heroImgDesktopWebp={heroImgDesktopWebp}
                heroImgDesktop={heroImgDesktop}
                horizontalPositionDesktopHero={horizontalPositionDesktopHero}
                horizontalPositionTablet={horizontalPositionTablet}
                horizontalPositionMobile={horizontalPositionMobile}
                title={title}
                client:load
              />
            </>
          )
        }
      </div>
    </div>
    <div
      class="bg-white
    w-auto
    pt-[45px]
    pb-[43px]
    sm:pt-[35px]
    sm:pb-[35px]
    pl-[35px]
    pr-[35px]
    md:pt-[50px]
    md:pb-[50px]"
    >
      <div class="lg:max-w-[70.5rem] md:max-w-[920px] bg-white m-auto">
        <div
          id="degree-school-department"
          class="flex
          
          items-start
          flex-col
          gap-[31px]
          sm:gap-[35px]
          sm:max-w-[685px]
          sm:m-auto
          sm:flex-row
          sm:flex-nowrap
        
          sm:justify-between
          md:max-w-none"
        >
          <TopOption
            heading={repeaterDegrees && repeaterDegrees.length > 1
              ? "Degrees"
              : "Degree"}
            imgSrc="ribbon"
          >
            {
              Array.isArray(repeaterDegrees)
                ? repeaterDegrees.map((degree, index) => (
                    <span
                      class={`block ${index >= 1 ? "mt-[4px] lg:mt-[6px]" : ""}`}
                    >
                      {degree.degreeName}
                    </span>
                  ))
                : null
            }
          </TopOption>

          <TopOptionNew
            client:load
            school={school}
            heading={school && school.length > 1 ? "Schools" : "School"}
            imgSrc="building"
            techEdMarginCheck={slug === "technology-engineering-education"
              ? true
              : false}
          >
            {school}
          </TopOptionNew>
          <!-- <TopOptionNew client:load department={department} heading={department && department.length > 1 ? 'Departments' : "Department"} imgSrc="departments">
            {school}
          </TopOptionNew> -->
          {
            department && (
              <TopOption
                client:load
                heading={
                  department && department.length > 1
                    ? "Departments"
                    : "Department"
                }
                department={department}
                imgSrc="departments"
              />
            )
          }
        </div>
      </div>
    </div>

    {
      announcementBar.announcementStartDate &&
        announcementBar.announcementText && (
          <AnnouncementBar
            copy={announcementBar.announcementText}
            start={announcementBar.announcementStartDate}
            end={announcementBar.announcementEndDate}
            link={announcementBar.accouncementLink}
            linkText={announcementBar.announcementLinkText}
            client:idle
          />
        )
    }

    <div
      class="bg-tcnjyellow w-auto
    pl-[35px]
    pr-[35px]
    sm:pl-[80px]
    sm:pr-[80px]
    md:pl-[35px]
    md:pr-[35px]"
    >
      <div class="lg:max-w-[70.5rem] md:max-w-[920px] m-auto">
        <AtAGlanceGrad
          programAtAGlance={programAtAGlance}
          programCoordinators={programCoordinators}
          client:load
        />
        <ProgramDetailsGrad programDetails={programDetails} client:load />
      </div>
    </div>
    {
      videos && videos.length > 0 && videos[0].videoUrl && (
        <div class="sm:px-[35px] bg-tcnjyellow ">
          <div
            class={`w-full ${
              videos.length === 2
                ? " gradient-yellow-white-25 sm:gradient-yellow-white-75  md:gradient-yellow-white-50 "
                : videos.length === 3
                  ? "gradient-yellow-white-50 sm:gradient-yellow-white-85  md:gradient-yellow-white-82"
                  : "gradient-yellow-white-50"
            }`}
          >
            <div class="lg:max-w-[70.5rem] md:max-w-[920px] m-auto px-[35px] sm:px-[45px] lgMd:px-0 ">
              {videos.length < 3 ? (
                <div class="flex flex-col gap-[25px] md:flex-row">
                  {videos.map((video, index) => (
                    <VideoPlayerBody
                      data-key={index}
                      videoUrl={video.videoUrl}
                      posterImage={video.posterImage.sourceUrl}
                      captionUrl={video.captionUrl}
                      client:load
                    />
                  ))}
                </div>
              ) : (
                <div
                  class={`flex flex-col sm:grid gap-[25px] sm:grid-cols-2 lg:grid-cols-3 ${videos.length === 3 ? `lg:gap-x-[40px] lg:gap-y-[22px]` : ``}`}
                >
                  {videos.map((video, index) => (
                    <VideoPlayerBody
                      data-key={index}
                      videoUrl={video.videoUrl}
                      posterImage={video.posterImage.sourceUrl}
                      captionUrl={video.captionUrl}
                      indexNumber={index}
                      videosLength={videos.length}
                      client:load
                    />
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )
    }
    <!-- <div class="bg-tcnjyellow w-auto"> -->
    <div
      class="sm:border-x-[35px] border-tcnjyellow bg-white w-full h-[75px] sm:h-[100px] md:h-0"
    >
    </div>
    <!-- </div> -->

    <div
      id="programs-of-study-container"
      class="px-[35px] w-auto sm:bg-tcnjyellow"
    >
      <div
        class="m-auto
      bg-white
      relative
      pb-[75px]
      sm:pb-[93px]
      sm:px-[45px]
      md:pb-[120px]"
      >
        <div
          class=`lg:max-w-[70.5rem] md:max-w-[920px] 
        m-auto
        bg-white
        pt-[0px]
        pb-[0] md:pt-[127px]
        `
        >
          <div
            class="font-domine text-[19px] leading-[30px]"
            id="program-body-copy"
            set:html={programHighlights || ""}
          />
        </div>
      </div>
    </div>
    <div
      class="px-[0] sm:px-[35px] w-auto sm:bg-tcnjyellow"
      id="lower-content-and-related-progras"
    >
      <div class="m-auto bg-white pb-[75px] sm:pb-[75px] md:pb-[150px]">
        <div class="lg:max-w-[70.5rem] md:max-w-[920px] m-auto">
          {
            lowerContent && (
              <LowerContent
                lowerContent={lowerContent}
                quote={quoteContentArea}
              />
            )
          }
          {
            !lowerContent && (
              <div
                class="
          h-[0px]
          mt-[-7px]
          md:mt-[0px]
          md:h-[46px]
          lg:h-[33px]
          "
              />
            )
          }
        </div>
        <div class="lg:max-w-[70.5rem] lg:m-auto">
          {
            learnMoreList && (
              <RelatedProgSlider learnMoreList={learnMoreList} client:idle />
            )
          }
        </div>
      </div>
    </div>
    <NextStepFooter customCtaButtons={customCtaButtons} />
  </main></Layout
>
